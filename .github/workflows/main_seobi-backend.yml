# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - seobi-backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    environment:
      name: 'Test'
    env:
      FLASK_APP: app
      FLASK_ENV: testing
      # 테스트용 데이터베이스 접속 정보
      PGUSER: ${{ secrets.TEST_PGUSER }}
      PGPASSWORD: ${{ secrets.TEST_PGPASSWORD }}
      PGHOST: ${{ secrets.TEST_PGHOST }}
      PGPORT: ${{ secrets.TEST_PGPORT }}
      PGDATABASE: ${{ secrets.TEST_PGDATABASE }}
      PGSSLROOTCERT: ${{ secrets.TEST_PGSSLROOTCERT }}
      AZURE_OPENAI_API_KEY: ${{ secrets.TEST_AZURE_OPENAI_API_KEY }}
      AZURE_OPENAI_API_VERSION: ${{ secrets.TEST_AZURE_OPENAI_API_VERSION }}
      AZURE_OPENAI_ENDPOINT: ${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}
      AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_NAME }}
      AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME: ${{ secrets.TEST_AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME }}
      GOOGLE_API_KEY: ${{ secrets.TEST_GOOGLE_API_KEY }}
      GOOGLE_CSE_ID: ${{ secrets.TEST_GOOGLE_CSE_ID }}
      JWT_SECRET_KEY: ${{ secrets.TEST_JWT_SECRET_KEY }}
      SECRET_KEY: ${{ secrets.TEST_SECRET_KEY }}
      JWT_ACCESS_TOKEN_EXPIRES: ${{ secrets.TEST_JWT_ACCESS_TOKEN_EXPIRES }}
      GOOGLE_CLIENT_ID: ${{ secrets.TEST_GOOGLE_CLIENT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Create SSL certificate directory
        run: mkdir -p certs

      - name: Generate self-signed SSL certificate
        run: |
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout certs/certificate.key \
            -out certs/certificate.pem \
            -subj "/C=KR/ST=Seoul/L=Seoul/O=Seobi/CN=localhost"

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create and start virtual environment
        run: |
          uv venv
          source .venv/bin/activate
      
      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv add -r requirements.txt
          uv add pytest pytest-cov

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v --cov=app

  build:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create and start virtual environment
        run: |
          uv venv
          source .venv/bin/activate
      
      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv add -r requirements.txt

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !.venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_BBAB0F361FDA43C1B4376933ED75D1C5 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_FB9EAA41DABA41D29AD25B07B6C83945 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_C0861A7203604D68AB663E67494A9D9F }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'seobi-backend'
          slot-name: 'Production'
          
